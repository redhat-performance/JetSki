- include_role:
    name: bootstrap
    tasks_from: 01_install_packages.yml

- name: Create temporary directory for inventory
  tempfile:
    state: directory
  register: inventory_tempdir
  when: inventory_hostname != 'localhost'
 
- name: set fact for inv file
  set_fact:
    "{{ item.name }}": "{{ playbook_dir +  '/' + item.path if inventory_hostname == 'localhost' else inventory_tempdir.path + '/' + item.path }}"
  with_items:
    - { name: ocpinv_file, path: ocpinv.json }

- name: check ocpinv file available
  stat:
      path: "{{ ocpinv_file }}"
  register: st

- name: Download ocpinv.json
  block:
    - uri:
        url: "{{ alias.lab_url }}/cloud/{{ cloud_name }}_ocpinventory.json"
        return_content: yes
      register: response
    
    - set_fact:
        ocpinv_content: "{{ response.json }}"
  when: lab_name == "alias"

- name: Download ocpinv.json
  block:
    - uri:
        url: "{{ scale.lab_url }}/cloud/{{ cloud_name }}_ocpinventory.json"
        return_content: yes
      register: response
    
    - set_fact:
        ocpinv_content: "{{ response.json }}"
  when: lab_name == "scale"

- name: Checking for inventory conflicts
  block:
    - name: read inv env file
      slurp:
        src: "{{ ocpinv_file }}"
      register: invfile

    - name: set User inventory fact
      set_fact:
        ocpinv_user_content: "{{ invfile['content'] | b64decode | from_json }}"

    - name: Get node list
      set_fact:
          gold_inv: "{{ ocpinv_content | json_query('nodes[*].pm_addr')  }}"        # QUADS inventory
          user_inv: "{{ ocpinv_user_content | json_query('nodes[*].pm_addr')  }}"   # Local user content

    - name: verify
      set_fact:
          compare_inv: "{{ user_inv | difference(gold_inv) }}"

    - name: Fail when there is an inventory conflicts
      fail:
        msg: Existing User inventory - ocpinv.json is not matching with QUADS inventory for {{ cloud_name }}, please remove existing ocpinv.json if deploying a new cloud. 
      when: compare_inv | length != 0      
  when: st.stat.exists

- name: create ocpinv.json file
  copy:
    dest: "{{ ocpinv_file }}"
    content: "{{ ocpinv_content | to_nice_json }}"
  when: not st.stat.exists
  
- name: read inv env file
  slurp:
    src: "{{ ocpinv_file }}"
  register: invfile

- name: set inventory fact
  set_fact:
    ocpinv_content: "{{ invfile['content'] | b64decode | from_json }}"

- name: set provisioning host and ocp cluster info
  block:
    - name: set provisioner hostname & index
      set_fact:
        provisioner_hostname: "{{ ocpinv_content.nodes[0].pm_addr | replace('mgmt-','') | replace('-drac', '') }}"
        prov_index: 0
      when: provisioner_hostname is not defined or provisioner_hostname == ""

    - block:
      - name: set 'pm_addr' for the specified hostname
        set_fact:
          prov_node: "mgmt-{{ provisioner_hostname }}"

      - name: set provisioner hostname index
        set_fact:
          prov_index: "{{ lookup('ansible.utils.index_of', data=ocpinv_content.nodes, test='eq', key='pm_addr', value=prov_node) }}"
      when: provisioner_hostname is defined and provisioner_hostname != "" 

    - name: set provisioner hostname
      set_fact:
        lab_ipmi_user:  "{{ ocpinv_content.nodes[prov_index|int].pm_user }}"
        lab_ipmi_password:  "{{ ocpinv_content.nodes[prov_index|int].pm_password }}"

- include_role:
    name: add-provisioner
    tasks_from: main.yml

- include_tasks: 10_load_old_inv.yml

- name: Set default deployed worker count
  set_fact:
    deployed_worker_fqdns: []

- name: Set already deployed worker count
  set_fact:
    deployed_worker_fqdns: "{{ deployed_worker_fqdns | default([]) + [ item.pm_addr ] }}"
  when: "'worker' in item.host_name"
  loop: "{{ ocp_deployed_node_content.nodes }}"
  
- name: Existing worker count
  set_fact:
    current_worker_count: "{{ deployed_worker_fqdns | length }}"

- name: Set scale worker count
  set_fact:
    worker_count: "{{ ocp_nondeployed_node_content.nodes | length + current_worker_count | int }}"
  when: worker_count is not defined 

- name: Set scale worker index
  set_fact:
    scale_worker_index: "{{ worker_count | int - current_worker_count | int}}"

- name: set scale_worker_node
  set_fact:
    scale_worker_node: "{{ ocp_nondeployed_node_content | combine({'nodes': ocp_nondeployed_node_content|json_query(query)}, recursive=True) }}"
  vars:
    query: nodes[0:{{scale_worker_index}}]

# Make sure required number of workers are available (useful when user passes wrong worker_count value)
- name: Fail when required number of worker nodes cannot be scaled
  fail:
    msg: Required number of nodes are not available to scale workers
  when: ( ( scale_worker_node.nodes | length + current_worker_count | int ) != worker_count | int ) or
        ( worker_count | int <= current_worker_count | int )    # If scale request is lesser than or equal current count

- name: Set worker FQDNs
  set_fact:
    worker_fqdns: "{{ worker_fqdns | default([]) + [ item.pm_addr |  replace('mgmt-','') | replace('-drac', '') ] }}"
  with_items:
    - "{{ scale_worker_node.nodes }}"

- name: Define variables
  set_fact:
    dell_nodes: []
    supermicro_nodes: []

- name: Set worker nodes
  block:
    - name: Set worker node dells (scale)
      set_fact:
        dell_nodes: "{{ dell_nodes + [ item ] }}"
      with_items:
        - "{{ worker_fqdns }}"
      when: lab_name == 'scale' and item.split('.')[0].split('-')[3] in lab_vars['machine_types']['dell']

    - name: Set worker node dells (alias)
      set_fact:
        dell_nodes: "{{ dell_nodes + [ item ] }}"
      with_items:
        - "{{ worker_fqdns }}"
      when: lab_name == 'alias' and item.split('.')[0].split('-')[2] in lab_vars['machine_types']['dell']

    - name: Set worker node supermicros (scale)
      set_fact:
        supermicro_nodes: "{{ supermicro_nodes + [ item ] }}"
      with_items:
        - "{{ worker_fqdns }}"
      when: lab_name == 'scale' and item.split('.')[0].split('-')[3] in lab_vars['machine_types']['supermicro']

    - name: Set worker node supermicros (alias)
      set_fact:
        supermicro_nodes: "{{ supermicro_nodes + [ item ] }}"
      with_items:
        - "{{ worker_fqdns }}"
      when: lab_name == 'alias' and item.split('.')[0].split('-')[2] in lab_vars['machine_types']['supermicro']

  vars:
    lab_vars: "{{ (lab_name == 'scale') | ternary(scale, alias) }}"
  when: lab_name in ['scale', 'alias']
  
- name: set ocp_nondeplopyed_node_content
  set_fact:
    ocp_deploying_node_content: "{{ ocp_deployed_node_content | combine({'nodes': ocp_deployed_node_content.nodes|union(scale_worker_node.nodes)}, recursive=True) }}"    

- name: set ocp_nondeplopyed_node_content
  set_fact:
    nondeploying_worker_nodes_content: "{{ ocp_nondeployed_node_content | combine({'nodes': ocp_nondeployed_node_content.nodes|difference(scale_worker_node.nodes)}, recursive=True) }}"
