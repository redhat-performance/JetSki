- name: Create temporary directory for inventory
  tempfile:
    state: directory
  register: inventory_tempdir
  when: inventory_hostname != 'localhost'
 
- name: set fact for inv file
  set_fact:
    "{{ item.name }}": "{{ playbook_dir +  '/' + item.path if inventory_hostname == 'localhost' else inventory_tempdir.path + '/' + item.path }}"
  with_items:
    - { name: ocpinv_file, path: ocpinv.json }
    - { name: ocp_node_inv_path, path: ocpnodeinv.json }

- name: check ocpinv file available
  stat:
      path: "{{ ocpinv_file }}"
  register: st

- name: Download ocpinv.json
  block:
    - uri:
        url: "{{ alias.lab_url }}/cloud/{{ cloud_name }}_ocpinventory.json"
        return_content: yes
      register: response
    
    - set_fact:
        ocpinv_content: "{{ response.json }}"
  when: lab_name == "alias"

- name: Download ocpinv.json
  block:
    - uri:
        url: "{{ scale.lab_url }}/cloud/{{ cloud_name }}_ocpinventory.json"
        return_content: yes
      register: response
    
    - set_fact:
        ocpinv_content: "{{ response.json }}"
  when: lab_name == "scale"

- name: Checking for inventory conflicts
  block:
    - name: read inv env file
      slurp:
        src: "{{ ocpinv_file }}"
      register: invfile

    - name: set User inventory fact
      set_fact:
        ocpinv_user_content: "{{ invfile['content'] | b64decode | from_json }}"

    - name: Get node list
      set_fact:
          gold_inv: "{{ ocpinv_content | json_query('nodes[*].pm_addr')  }}"        # QUADS inventory
          user_inv: "{{ ocpinv_user_content | json_query('nodes[*].pm_addr')  }}"   # Local user content

    - name: verify
      set_fact:
          compare_inv: "{{ user_inv | difference(gold_inv) }}"

    - name: Fail when there is an inventory conflicts
      fail:
        msg: Existing User inventory - ocpinv.json is not matching with QUADS inventory for {{ cloud_name }}, please remove existing ocpinv.json if deploying a new cloud. 
      when: compare_inv | length != 0      
  when: st.stat.exists

- name: create ocpinv.json file
  copy:
    dest: "{{ ocpinv_file }}"
    content: "{{ ocpinv_content | to_nice_json }}"
  when: not st.stat.exists

- name: Create final inventory used for deployment
  block:
    - name: read inv env file
      slurp:
        src: "{{ ocpinv_file }}"
      register: finalinv

    - name: set inventory fact
      set_fact:
        ocpinv_content: "{{ finalinv['content'] | b64decode | from_json }}"

- name: set provisioning host and ocp cluster info
  block:
    - name: set provisioner hostname
      set_fact:
        provisioner_hostname: "{{ ocpinv_content.nodes[0].pm_addr | replace('mgmt-','') | replace('-drac', '') }}"

    - name: set ocp_node_content
      set_fact:
          ocp_node_content: |
              {% set a=ocpinv_content.pop('nodes') %}
              {{ ocpinv_content | combine({'nodes': a|difference([a[0]])}, recursive=True) }}

- name: create ocpnodeinv.json file
  copy:
    dest: "{{ ocp_node_inv_path }}"
    content: "{{ ocp_node_content | to_nice_json }}"

- name: set fact for master mgmt
  set_fact:
    master_mgmts:  "{{ ocp_node_content| json_query('nodes[0:3].pm_addr')}}"

- name: Set master FQDNs
  set_fact:
    master_fqdns: "{{ master_fqdns|default([]) + [ item |  replace('mgmt-','') | replace('-drac', '') ] }}"
  with_items:
    - "{{ master_mgmts }}"

- name: Set worker count
  set_fact:
    worker_count: "{{ ocp_node_content.nodes | length - 3 }}"
  when: worker_count is not defined 

- name: Set worker index
  set_fact:
    worker_index: "{{ worker_count | int + 3 }}"

- name: set fact for worker mgmt
  set_fact:
    worker_mgmts: "{{ ocp_node_content| json_query(query)}}"
  vars:
    query: nodes[3:{{worker_index}}].pm_addr

# Make sure required number of workers are available (useful when user passes wrong worker_count value)
- name: Fail when required number of worker nodes cannot be provisioned
  fail:
    msg: Required number of nodes are not available for workers
  when: worker_mgmts | length < worker_count | int

# Needed in case where worker_mgmts is empty list, in that case worker_fdns fact is not set and there is a failure in set-deployment-facts role
- name: Set fact for empty worker_fqdns
  set_fact:
    worker_fqdns: []

- name: Set worker FQDNs
  set_fact:
    worker_fqdns: "{{ worker_fqdns|default([]) + [ item |  replace('mgmt-','') | replace('-drac', '') ] }}"
  with_items:
    - "{{ worker_mgmts }}"

- name: set fact for ocp nodes mgmt
  set_fact:
    ocp_mgmts: "{{ ocp_node_content| json_query('nodes[*].pm_addr')}}"

- name: Set ocp node FQDNs
  set_fact:
    ocp_fqdns: "{{ ocp_fqdns|default([]) + [ item |  replace('mgmt-','') | replace('-drac', '') ] }}"
  with_items:
    - "{{ ocp_mgmts }}"

- name: set fact for master bm macs
  set_fact:
    master_bm_macs:  "{{ ocp_node_content| json_query('nodes[0:3].mac[2]')}}"

- name: set fact for master provisioning macs
  set_fact:
    master_prov_macs:  "{{ ocp_node_content| json_query('nodes[0:3].mac[1]')}}"

# Works even in case of 0 workers as json_query returns empty list
- name: set fact for worker bm macs
  set_fact:
    worker_bm_macs:  "{{ ocp_node_content| json_query(query)}}"
  vars:
    query: nodes[3:{{worker_index}}].mac[2]

# Works even in case of 0 workers as json_query returns empty list
- name: set fact for worker provisioning macs
  set_fact:
    worker_prov_macs:  "{{ ocp_node_content| json_query(query)}}"
  vars:
    query: nodes[3:{{worker_index}}].mac[1]
