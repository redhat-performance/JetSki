---
- name: IPI on Baremetal Installation Playbook -- Red Hat Shared Labs JetSki Edition
  hosts: orchestration
  roles:
    - { role: bootstrap }

- hosts: provisioner
  roles:
    - { role: prepare-kni, ssh_path: /root/.ssh}

- hosts: orchestration
  roles:
    - { role: add-provisioner }

- hosts: provisioner
  roles:
    - { role: set-deployment-facts }
    - { role: network-discovery }
    - { role: shared-labs-prep }
    - { role: node-prep }
    - { role: installer }
    - { role: routable_api, when: routable_api | bool }
  post_tasks:
    - name: Fix default route
      shell: |
        ssh core@{{ item }}  -o UserKnownHostsFile=/dev/null  -o StrictHostKeyChecking=no  sudo ip route delete default
        ssh core@{{ item }}  -o UserKnownHostsFile=/dev/null  -o StrictHostKeyChecking=no  sudo ip route add default via {{ extcidrnet | ipaddr('last_usable') }}
      with_items: "{{ groups['masters'] }}"
      when: routable_api | bool
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
    no_proxy: "{{ no_proxy_list }}"

- name: Finishing IPI on Baremetal Installation 
  hosts: provisioner
  tasks: 
    - name: Create directory
      file:
        state: directory
        path: "{{ ansible_facts['user_dir'] }}/scale-worker"

    - name: Writing Deployed node content to a file
      copy:
        dest: "{{ ansible_facts['user_dir'] }}/scale-worker/ocpdeployednodeinv.json"
        content: "{{ ocp_deploying_node_content | to_nice_json }}"
      when: ocp_deploying_node_content.nodes | length > 0   

    - name: Writing available non Deployed node content to a file
      copy:
        dest: "{{ ansible_facts['user_dir'] }}/scale-worker/ocpnondeployednodeinv.json"
        content: "{{ nondeploying_worker_nodes_content | to_nice_json }}"
      when: nondeploying_worker_nodes_content.nodes | length > 0

    - name: Deleting non Deployed node content
      file:
        dest: "{{ ansible_facts['user_dir'] }}/scale-worker/ocpnondeployednodeinv.json"
        state: absent
      when: nondeploying_worker_nodes_content.nodes | length == 0

    - name: Copy kubeconfig file from provisioner
      fetch:
        src: "{{ ansible_facts['user_dir'] }}/clusterconfigs/auth/{{ item }}"
        dest: "/tmp/"
        flat: yes
      with_items:
        - "kubeconfig"
        - "kubeadmin-password"
